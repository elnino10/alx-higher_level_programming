The 0-add_integer module

Using the function add_integer()
it returns the sum of two integers passed to it

First import add_interger from 0-add_interger module:

>>> add_integer = __import__('0-add_integer').add_integer

How to use it:
works for two positive integer values
>>> add_integer(1, 2)
3

works for two negative integers
>>> add_integer(-1, -2)
-3

works on floating numbers by truncating them
>>> add_integer(1.4, 2.0)
3

raise TypeError when either or both values are characters or strings
>>> add_integer(1, 'a') #doctest: +ELLIPSIS
Traceback (most recent call last):
  ...
TypeError: b must be an integer

>>> add_integer('a', 2) #doctest: +ELLIPSIS
Traceback (most recent call last):
  ...
TypeError: a must be an integer

works when only integer is passed
>>> add_integer(1) #doctest: +ELLIPSIS
99

raise TypeError if None is passed as argument
>>> add_integer(None) #doctest: +ELLIPSIS
Traceback (most recent call last):
  ...
TypeError: a must be an integer

>>> add_integer(1.5, None) #doctest: +ELLIPSIS
Traceback (most recent call last):
  ...
TypeError: b must be an integer

raises exception with very large numbers
>>> add_integer(3.99999999999999999999999999999999999999999999999999999e+4000, 5)
Traceback (most recent call last):
TypeError: a must be an integer

>>> add_integer(5, 3.99999999999999999999999999999999999999999999999999999e+4000)
Traceback (most recent call last):
TypeError: b must be an integer

>>> add_integer(2.2250738585072014e-318, -2)
-2

>>> add_integer(1.7976931348623157e+308, 5)
Traceback (most recent call last):
TypeError: a must be an integer

>>> add_integer(3.402823466e+38, 5)
340282346600000016151267322115014000645

>>> add_integer(3.402823466e+39, 5)
Traceback (most recent call last):
TypeError: a must be an integer