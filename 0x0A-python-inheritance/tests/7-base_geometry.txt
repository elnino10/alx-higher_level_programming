The ``7-base_geometry`` module

Using ``BaseGeometry``

This is an example text file in reStructuredText format.  First import
``BaseGeometry`` from the ``7-base_geometry`` module:

>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry


# name = string, value = None
>>> bg = BaseGeometry()
>>> bg.integer_validator("name", None)
Traceback (most recent call last):
...
TypeError: name must be an integer


# name = string, value = string
>>> bg = BaseGeometry()
>>> bg.integer_validator("name", "blue")
Traceback (most recent call last):
...
TypeError: name must be an integer


# name = string, value = negative
>>> bg = BaseGeometry()
>>> bg.integer_validator("name", -1)
Traceback (most recent call last):
...
ValueError: name must be greater than 0

# name = test area()
>>> bg = BaseGeometry()
>>> bg.area()
Traceback (most recent call last):
...
Exception: area() is not implemented

#name = test empty args
>>> bg.integer_validator()
Traceback (most recent call last):
...
TypeError: BaseGeometry.integer_validator() missing 2 required positional arguments: 'name' and 'value'

#name = test empty for string argument
>>> bg.integer_validator("new")
Traceback (most recent call last):
...
TypeError: BaseGeometry.integer_validator() missing 1 required positional argument: 'value'

#name = test
>>> bg.integer_validator("new", 2)
>>>

#name = test with value 0
>>> bg.integer_validator("new", 0)
Traceback (most recent call last):
...
ValueError: new must be greater than 0

#name = test with a tuple
>>> bg.integer_validator("new", (2,))
Traceback (most recent call last):
...
TypeError: new must be an integer